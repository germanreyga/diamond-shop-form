{"version":3,"sources":["components/DButton.js","components/ButtonFilter.js","components/SliderFilter.js","DiamondData.js","components/DiamondStore.js","App.js","serviceWorker.js","index.js"],"names":["DButton","props","className","isSelected","onClick","selectHandler","value","src","img","alt","style","fontFamily","toUpperCase","ButtonFilter","images","imgs","values","selected","selectedOption","fstyle","label","labelName","listImages","map","path","index","key","height","width","SliderFilter","changeRange","type","isReloaded","sType","useState","min","max","caratRange","setCaratRange","useEffect","undefined","Row","Col","xs","bottom","position","Fragment","formatLabel","_","minValue","maxValue","step","onChange","id","name","toLocaleString","readOnly","SHAPE_PATH","COLOR_PATH","CLAR_PATH","CUT_PATH","shapeImgs","shapeValues","colorImgs","colorValues","clarityImgs","clarityValues","cutImgs","cutValues","caratImgs","caratValues","DiamondStore","shape","setShape","shapeButtonsImgs","data","shapeButtonsValues","color","setColor","colorButtonsImgs","colorButtonsValues","clarity","setClarity","clarityButtonsImgs","clarityButtonsValues","cut","setCut","cutButtonsImgs","cutButtonsValues","priceRange","setPriceRange","loaded","Container","md","shapeValue","colorValue","cutValue","console","dir","window","alert","JSON","stringify","sendForm","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d12b6ee6.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst DButton = (props) => {\r\n  return (\r\n    <button\r\n      className={props.isSelected ? \"d-btn active\" : \"d-btn\"}\r\n      onClick={() => {\r\n        props.selectHandler(props.value);\r\n      }}\r\n    >\r\n      <img src={props.img} alt={props.value} />\r\n      <br />\r\n      <div style={{ fontFamily: \"NunitoSans\" }}>\r\n        {props.value.toUpperCase()}\r\n      </div>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default DButton;\r\n","import React from \"react\";\r\nimport DButton from \"./DButton\";\r\n\r\nconst ButtonFilter = (props) => {\r\n  const images = props.imgs;\r\n  const selectHandler = props.selectHandler;\r\n  const values = props.values;\r\n  const selected = props.selectedOption;\r\n  const style = props.fstyle;\r\n  const label = props.labelName;\r\n\r\n  const listImages = images.map((path, index) => (\r\n    <DButton\r\n      key={index}\r\n      img={path}\r\n      selectHandler={selectHandler}\r\n      value={values[index]}\r\n      isSelected={values[index] === selected ? true : false}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        {label}{\" \"}\r\n        <img\r\n          src=\"/assets/img/tooltip-2.png\"\r\n          style={{ height: 12, width: 10 }}\r\n        ></img>\r\n      </div>\r\n      <div className={style}>{listImages}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ButtonFilter;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport InputRange from \"react-input-range\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\n\r\nconst SliderFilter = (props) => {\r\n  const label = props.labelName;\r\n  const changeRange = props.selectHandler;\r\n  const isReloaded = props.isReloaded;\r\n  const type = props.sType;\r\n\r\n  const [caratRange, setCaratRange] = useState({\r\n    min: props.min,\r\n    max: props.max,\r\n  });\r\n\r\n  useEffect(() => {\r\n    changeRange(caratRange);\r\n  }, [caratRange, changeRange]);\r\n\r\n  return (\r\n    <>\r\n      <div>{label}</div>\r\n      {props.imgs !== undefined ? (\r\n        <Row>\r\n          <Col xs={6}>\r\n            <img\r\n              className=\"float-left align-bottom\"\r\n              style={{ bottom: 0, position: \"absolute\" }}\r\n              src={props.imgs[0]}\r\n              alt={props.values[0]}\r\n            />\r\n          </Col>\r\n          <Col xs={6}>\r\n            <img\r\n              className=\"float-right align-bottom\"\r\n              src={props.imgs[1]}\r\n              alt={props.values[1]}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      ) : (\r\n        <React.Fragment></React.Fragment>\r\n      )}\r\n\r\n      <InputRange\r\n        formatLabel={(_) => \"\"}\r\n        minValue={props.min}\r\n        value={{ min: caratRange.min, max: caratRange.max }}\r\n        maxValue={props.max}\r\n        step={type === \"price\" ? 1 : 0.5}\r\n        onChange={(value) => setCaratRange({ min: value.min, max: value.max })}\r\n      />\r\n      <Row>\r\n        <Col xs={6}>\r\n          <input\r\n            className=\"form-control range-inp float-left\"\r\n            type={\"text\"}\r\n            id=\"min\"\r\n            name=\"min\"\r\n            min={props.min}\r\n            value={\r\n              type === \"price\"\r\n                ? \"$\" + caratRange.min.toLocaleString()\r\n                : caratRange.min\r\n            }\r\n            max={props.max}\r\n            readOnly\r\n          />\r\n        </Col>\r\n        <Col xs={6}>\r\n          <input\r\n            className=\"form-control range-inp float-right\"\r\n            type={\"text\"}\r\n            id=\"max\"\r\n            name=\"max\"\r\n            min={props.min}\r\n            value={\r\n              type === \"price\"\r\n                ? \"$\" + caratRange.max.toLocaleString()\r\n                : caratRange.max\r\n            }\r\n            max={props.max}\r\n            readOnly\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SliderFilter;\r\n","const SHAPE_PATH = \"/assets/img/forma\";\r\nconst COLOR_PATH = \"/assets/img/color\";\r\nconst CLAR_PATH = \"/assets/img/claridad\";\r\nconst CUT_PATH = \"/assets/img/corte\";\r\nconst CARAT_PATH = \"/assets/img/quilataje\";\r\n\r\nconst shapeImgs = [\r\n  `${SHAPE_PATH}/asscher.png`,\r\n  `${SHAPE_PATH}/baguette.png`,\r\n  `${SHAPE_PATH}/cojijn.png`,\r\n  `${SHAPE_PATH}/corazon.png`,\r\n  `${SHAPE_PATH}/esmeralda.png`,\r\n  `${SHAPE_PATH}/marquesa.png`,\r\n  `${SHAPE_PATH}/ovalo.png`,\r\n  `${SHAPE_PATH}/pera.png`,\r\n  `${SHAPE_PATH}/princesa.png`,\r\n  `${SHAPE_PATH}/radiante.png`,\r\n  `${SHAPE_PATH}/redondo.png`,\r\n  `${SHAPE_PATH}/trillon.png`,\r\n];\r\n\r\nconst shapeValues = [\r\n  \"asscher\",\r\n  \"baguette\",\r\n  \"cojijn\",\r\n  \"corazon\",\r\n  \"esmeralda\",\r\n  \"marquesa\",\r\n  \"ovalo\",\r\n  \"pera\",\r\n  \"princesa\",\r\n  \"radiante\",\r\n  \"redondo\",\r\n  \"trillon\",\r\n];\r\n\r\nconst colorImgs = [\r\n  `${COLOR_PATH}/amarillo-claro.png`,\r\n  `${COLOR_PATH}/casi-incoloro.png`,\r\n  `${COLOR_PATH}/incoloro.png`,\r\n  `${COLOR_PATH}/ligeramente-amarillo.png`,\r\n];\r\n\r\nconst colorValues = [\r\n  \"amarillo claro\",\r\n  \"casi incoloro\",\r\n  \"incoloro\",\r\n  \"ligeramente amarillo\",\r\n];\r\n\r\nconst clarityImgs = [\r\n  `${CLAR_PATH}/imperfecciones-10x.png`,\r\n  `${CLAR_PATH}/imperfecciones-no-visibles.png`,\r\n  `${CLAR_PATH}/imperfecciones-simple-vista.png`,\r\n  `${CLAR_PATH}/perfecta.png`,\r\n];\r\n\r\nconst clarityValues = [\r\n  \"imperfecciones visibles a 10x\",\r\n  \"imperfecciones no visibles\",\r\n  \"imperfecciones visibles a simple vista\",\r\n  \"perfecta\",\r\n];\r\n\r\nconst cutImgs = [\r\n  `${CUT_PATH}/bueno.png`,\r\n  `${CUT_PATH}/excelente.png`,\r\n  `${CUT_PATH}/muy-bueno.png`,\r\n  `${CUT_PATH}/regular.png`,\r\n];\r\n\r\nconst cutValues = [\"bueno\", \"excelente\", \"muy bueno\", \"regular\"];\r\n\r\nconst caratImgs = [`${CARAT_PATH}/pequeno.png`, `${CARAT_PATH}/grande.png`];\r\n\r\nconst caratValues = [\"pequeño\", \"grande\"];\r\n\r\nexport {\r\n  shapeImgs,\r\n  shapeValues,\r\n  colorImgs,\r\n  colorValues,\r\n  clarityImgs,\r\n  clarityValues,\r\n  cutImgs,\r\n  cutValues,\r\n  caratImgs,\r\n  caratValues,\r\n};\r\n","import React, { useState } from \"react\";\r\nimport ButtonFilter from \"./ButtonFilter\";\r\nimport SliderFilter from \"./SliderFilter\";\r\nimport * as data from \"../DiamondData\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\n\r\nconst DiamondStore = () => {\r\n  const [shape, setShape] = useState(\"none\");\r\n  let shapeButtonsImgs = data.shapeImgs;\r\n  let shapeButtonsValues = data.shapeValues;\r\n\r\n  const [color, setColor] = useState(\"none\");\r\n  let colorButtonsImgs = data.colorImgs;\r\n  let colorButtonsValues = data.colorValues;\r\n\r\n  const [clarity, setClarity] = useState(\"none\");\r\n  let clarityButtonsImgs = data.clarityImgs;\r\n  let clarityButtonsValues = data.clarityValues;\r\n\r\n  const [cut, setCut] = useState(\"none\");\r\n  let cutButtonsImgs = data.cutImgs;\r\n  let cutButtonsValues = data.cutValues;\r\n\r\n  const [caratRange, setCaratRange] = useState(\"none\");\r\n  let caratImgs = data.caratImgs;\r\n  let caratValues = data.caratValues;\r\n\r\n  const [priceRange, setPriceRange] = useState(\"none\");\r\n\r\n  const [loaded, setLoaded] = useState({ min: 0, max: 30 });\r\n\r\n  function onShapeSelect(shapeValue) {\r\n    setShape(shapeValue);\r\n  }\r\n\r\n  function onColorSelect(colorValue) {\r\n    setColor(colorValue);\r\n  }\r\n\r\n  function onClaritySelect(colorValue) {\r\n    setClarity(colorValue);\r\n  }\r\n\r\n  function onCutSelect(cutValue) {\r\n    setCut(cutValue);\r\n  }\r\n\r\n  function onCaratSelect(caratRange) {\r\n    setCaratRange(caratRange);\r\n  }\r\n\r\n  function onPriceSelect(priceRange) {\r\n    setPriceRange(priceRange);\r\n  }\r\n\r\n  function sendForm() {\r\n    const data = {\r\n      shape: shape,\r\n      color: color,\r\n      clarity: clarity,\r\n      cut: cut,\r\n      caratRange: caratRange,\r\n      priceRange: priceRange,\r\n    };\r\n\r\n    console.dir(data);\r\n    window.alert(\"DATOS:\\n\" + JSON.stringify(data));\r\n  }\r\n\r\n  function cleanForm() {\r\n    setShape(\"none\");\r\n    setColor(\"none\");\r\n    setClarity(\"none\");\r\n    setCut(\"none\");\r\n    setCaratRange(\"none\");\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col md={6}>\r\n          <Row>\r\n            <Col md={12}>\r\n              <ButtonFilter\r\n                imgs={shapeButtonsImgs}\r\n                selectHandler={onShapeSelect}\r\n                values={shapeButtonsValues}\r\n                selectedOption={shape}\r\n                fstyle={\"shape-filter\"}\r\n                labelName={\"Forma\"}\r\n              />\r\n            </Col>\r\n\r\n            <Col md={12}>\r\n              <ButtonFilter\r\n                imgs={colorButtonsImgs}\r\n                selectHandler={onColorSelect}\r\n                values={colorButtonsValues}\r\n                selectedOption={color}\r\n                fstyle={\"color-filter\"}\r\n                labelName={\"Color\"}\r\n              />\r\n            </Col>\r\n            <Col md={12}>\r\n              <ButtonFilter\r\n                imgs={clarityButtonsImgs}\r\n                selectHandler={onClaritySelect}\r\n                values={clarityButtonsValues}\r\n                selectedOption={clarity}\r\n                fstyle={\"clarity-filter\"}\r\n                labelName={\"Claridad\"}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n        <Col md={6}>\r\n          <Row>\r\n            <Col md={12}>\r\n              <ButtonFilter\r\n                imgs={cutButtonsImgs}\r\n                selectHandler={onCutSelect}\r\n                values={cutButtonsValues}\r\n                selectedOption={cut}\r\n                fstyle={\"cut-filter\"}\r\n                labelName={\"Corte\"}\r\n              />\r\n            </Col>\r\n            <Col md={12}>\r\n              <SliderFilter\r\n                min={loaded.min}\r\n                max={loaded.max}\r\n                loaded={loaded}\r\n                labelName={\"Quilataje\"}\r\n                imgs={caratImgs}\r\n                values={caratValues}\r\n                selectHandler={onCaratSelect}\r\n                sType={\"number\"}\r\n              />\r\n            </Col>\r\n            <Col md={12}>\r\n              <SliderFilter\r\n                min={loaded.min}\r\n                max={loaded.max}\r\n                loaded={loaded}\r\n                labelName={\"Precio\"}\r\n                selectHandler={onPriceSelect}\r\n                sType={\"price\"}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n      <br />\r\n      <Row className=\"text-center\">\r\n        <Col md={6}>\r\n          <button\r\n            className=\"btn btn-sm btn-primary btn-buscar\"\r\n            onClick={() => sendForm()}\r\n          >\r\n            BUSCAR\r\n          </button>\r\n        </Col>\r\n        <Col md={6}>\r\n          <button\r\n            className=\"btn btn-sm btn-secondary btn-clean\"\r\n            onClick={() => cleanForm()}\r\n          >\r\n            LIMPIAR FILTROS\r\n          </button>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default DiamondStore;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport DiamondStore from \"./components/DiamondStore\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DiamondStore></DiamondStore>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-input-range/lib/css/index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}